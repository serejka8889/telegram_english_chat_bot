import random
import psycopg2
from telebot import types, TeleBot
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

# –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö "english_chat_bot_m_2" –≤ postgres

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
dbname = "english_chat_bot_m_2"
user = "postgres"
password = "123456"
host = "127.0.0.1"
port = "5432"

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
token_bot = "" # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
if token_bot is None:
    raise ValueError("token_bot –Ω–µ –∑–∞–¥–∞–Ω!")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
try:
    conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host, port=port)
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit(1)

cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
def create_filling_db():
    with conn.cursor() as cursor:

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS common_words (
            id SERIAL PRIMARY KEY,
            word TEXT NOT NULL,
            translation TEXT NOT NULL,
            UNIQUE (word)
        );
        CREATE TABLE IF NOT EXISTS user_states (
            user_id BIGINT PRIMARY KEY,
            current_state TEXT
        );

        CREATE TABLE IF NOT EXISTS personal_words (
            id SERIAL PRIMARY KEY,
            word TEXT NOT NULL,
            translation TEXT NOT NULL,
            user_id BIGINT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES user_states (user_id)
        );
        """)
        conn.commit()

        initial_words = [
            ('red', '–∫—Ä–∞—Å–Ω—ã–π'),
            ('blue', '—Å–∏–Ω–∏–π'),
            ('green', '–∑–µ–ª–µ–Ω—ã–π'),
            ('yellow', '–∂–µ–ª—Ç—ã–π'),
            ('black', '—á–µ—Ä–Ω—ã–π'),
            ('white', '–±–µ–ª—ã–π'),
            ('i', '—è'),
            ('you', '—Ç—ã'),
            ('he', '–æ–Ω'),
            ('she', '–æ–Ω–∞' )
        ]
        try:
            cursor.executemany("INSERT INTO common_words (word, translation) VALUES (%s, %s) ON CONFLICT (word) DO NOTHING", initial_words)
            conn.commit()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

create_filling_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏
state_storage = StateMemoryStorage()
bot = TeleBot(token_bot, state_storage=state_storage)

# –ö–æ–º–∞–Ω–¥—ã
class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå'
    NEXT = '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚è≠'

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    delete_word = State()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î
def save_state(user_id, state):
    cursor.execute("INSERT INTO user_states (user_id, current_state) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET current_state = EXCLUDED.current_state", (user_id, state))
    conn.commit()

def load_state(user_id):
    cursor.execute("SELECT current_state FROM user_states WHERE user_id=%s", (user_id,))
    result = cursor.fetchone()
    if result:
        return result[0]
    else:
        return None

# –°—Ç–∞—Ä—Ç —á–∞—Ç –±–æ—Ç–∞ - –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id FROM user_states WHERE user_id = %s", (message.from_user.id,))
    user = cursor.fetchone()
    msg = "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ."

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        cursor.execute("INSERT INTO user_states (user_id) VALUES (%s)", (message.from_user.id,))
        conn.commit()
        bot.send_message(message.chat.id, f"üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n{msg}")
    else:
        bot.send_message(message.chat.id, f"üëã–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞.\n\n{msg}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = load_state(message.from_user.id)
    if state:
        bot.set_state(message.from_user.id, state, message.chat.id)
    else:
        bot.set_state(message.from_user.id, "target_word", message.chat.id)

    train_word(message)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏ —Å–ª–æ–≤–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def train_word(message):
    with conn.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—â–∏—Ö —Å–ª–æ–≤
        cursor.execute("SELECT * FROM (SELECT word, translation FROM personal_words WHERE user_id = %s UNION ALL SELECT word, translation FROM common_words) AS result ORDER BY RANDOM() LIMIT 4;", (message.from_user.id,))
        results = cursor.fetchall()
               
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥
        target_word, translate = results[0]
        options = [result[0] for result in results]

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        random.shuffle(options) 

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    buttons = [types.KeyboardButton(option) for option in options]
    markup = types.ReplyKeyboardMarkup(row_width=2)
    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫: {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, "translate_word", message.chat.id)
    save_state(message.from_user.id, "translate_word")

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['options'] = options

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    bot.set_state(message.from_user.id, "target_word", message.chat.id)
    save_state(message.from_user.id, "target_word")
    train_word(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ üá∫üá∏: –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–û—Ç–º–µ–Ω–∏—Ç—å\" –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è")
    bot.register_next_step_handler(msg, process_new_word)
    bot.set_state(message.from_user.id, "another_words", message.chat.id)
    save_state(message.from_user.id, "another_words")

def process_new_word(message):
    new_word = message.text.strip().lower()
    if new_word == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        open_buttons(message)
        return
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ üá∑üá∫:")
    bot.register_next_step_handler(msg, save_translation, new_word=new_word)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
def cancel_addition(message):
    bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    open_buttons(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
def save_translation(message, new_word):
    new_translation = message.text.strip().lower()
    with conn.cursor() as cursor:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ
        cursor.execute("SELECT word FROM personal_words WHERE word = %s AND user_id = %s;", (new_word, message.from_user.id))
        word_record = cursor.fetchone()
        if word_record is None:
            cursor.execute("INSERT INTO personal_words (word, translation, user_id) VALUES (%s, %s, %s);", (new_word, new_translation, message.from_user.id))
            conn.commit()
            bot.reply_to(message, "–°–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT cast(SUM(counts) AS INT) FROM (SELECT COUNT(*) as counts FROM personal_words WHERE user_id = %s UNION ALL SELECT COUNT(*) as counts FROM common_words) AS total_words;", (message.from_user.id,))
            total_words = cursor.fetchone()[0]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤
            bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ {total_words} —Å–ª–æ–≤!")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            open_buttons(message)
        else:
            bot.send_message(message.chat.id, f"–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ {new_word} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def show_delete_options(message):
    mesg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ üá∫üá∏: –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–û—Ç–º–µ–Ω–∏—Ç—å\" –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è:")
    bot.register_next_step_handler(mesg,handle_delete_word)
    bot.set_state(message.from_user.id, "delete_word", message.chat.id)
    save_state(message.from_user.id, "delete_word")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
def cancel_deletion(message):
    bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    open_buttons(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
def handle_delete_word(message):
    word_to_delete = message.text.strip().lower()
    if word_to_delete == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        open_buttons(message)
        return

    with conn.cursor() as cursor:
        cursor.execute("DELETE FROM personal_words WHERE word = %s AND user_id = %s returning id;", (word_to_delete, message.from_user.id))
        conn.commit()
        result_del = cursor.fetchone()

        if result_del == None:
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è '{word_to_delete}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            open_buttons(message)
        else:
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
            open_buttons(message)          

def open_buttons(message):
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons = [next_btn, add_word_btn, delete_word_btn]
    markup = types.ReplyKeyboardMarkup(row_width=2)
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = f"{target_word} -> {data['translate_word']}"
            hint_text = ["–í–µ—Ä–Ω–æ!‚úÖ", hint]
            hint = "\n".join(hint_text)      
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons = [next_btn, add_word_btn, delete_word_btn]
            markup.add(*buttons)
        else:
            hint = f"–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ üá∑üá∫: {data['translate_word']}"
            
        bot.send_message(message.chat.id, hint, reply_markup=markup)
        bot.set_state(message.from_user.id, "target_word", message.chat.id)
        save_state(message.from_user.id, "target_word")    

bot.infinity_polling(skip_pending=True)
